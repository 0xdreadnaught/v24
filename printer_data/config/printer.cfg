[include mainsail.cfg]
#[include cfg-components/sensors.cfg]
[include cfg-components/leds.cfg]
[include cfg-components/cartographer.cfg]
[include cfg-components/axis.cfg]
[include cfg-components/extruder.cfg]
[include cfg-components/fans.cfg]
[include cfg-components/input_shaper.cfg]
[include cfg-components/temp_monitoring.cfg]
[include cfg-components/filament_sensor.cfg]
[include cfg-components/macros.cfg]
[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

#####################################################################
## 	                MCU
#####################################################################

[mcu EBBCan] #SB2209
canbus_uuid: 368273758734   
#  The following command is used to view the ID of canbus and needs to be entered in the ssh terminal.
# “ ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0 ”

#--------------------------------------------------------------

[mcu] #Octopus pro
# Query the ID of canbus：
# cd ~/CanBoot/scripts
# python3 flash_can.py -i can0 -q
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_580026000A51313133353932-if00
canbus_uuid= 7e0e805a7c3f   
canbus_interface:can0

#####################################################################
##                  Heater_bed
#####################################################################

[heater_bed]
heater_pin: PA3              # (BE0)
sensor_pin: PF3              # sensor interface(TB)
sensor_type: ATC Semitec 104GT-2	 #ATC Semitec 104GT-2
control: pid                 ##heater_bed Temperature PID Calibration Command:  "PID_CALIBRATE HEATER=heater_bed TARGET=100"
pid_kp: 58.437
pid_ki: 2.347
pid_kd: 363.769
min_temp: 0
max_temp: 120
max_power: 1.0
	
#####################################################################
# 	                   Bed Grid Calibration
#####################################################################

[bed_mesh]
speed: 100                    # Calibration speed
horizontal_move_z: 15        # Z-axis movement speed
mesh_min: 30,30              # Minimum calibration point coordinates x, y
mesh_max: 270, 270           # Maximum calibration point coordinates x, y
probe_count: 32,32             # Number of sampling points (7X7 is 49 points)
mesh_pps: 2,2                # Number of supplementary sampling points
algorithm: bicubic           # algorithmic model
bicubic_tension: 0.2         # Algorithmic interpolation don't move
move_check_distance: 3

[stable_z_home]
gcode:
    #doesn't need anything here 

#####################################################################
#                          Idle off hot bed
#####################################################################

[idle_timeout]
timeout: 3600                # The hot bed is switched off if the idle time exceeds 60 minutes

#####################################################################
#                        Homing and Gantry Adjustment
#####################################################################

[quad_gantry_level]
gantry_corners:
	-60,-10
	360,370
points:
	50,25
	50,225
	250,225
	250,25
speed: 500                          # Levelling speed
horizontal_move_z: 25               # Z-axis starting height
retries: 5                          # Number of out-of-tolerance retries
retry_tolerance: 0.0030               # Sampling tolerance
max_adjust: 10                      # Maximum adjustment stroke for leveling

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,       # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,         # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

[gcode_macro PROBECALIBRATE]
gcode:
    HOME
    G0 X150 Y150 Z1 F3600
#    G0 X175 Y175 Z1 F3600  ##350mm
    PROBE_CALIBRATE

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR               # Unloading net beds
    G28                            # Homing all axes
    QUAD_GANTRY_LEVEL            # Gantry levelling
    G28                            # Homing all axes
    G0 X150 Y150 Z30 F3600         # 300mm
    #G0 X175 Y175 Z30 F3600         # 350mm

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  HOME                   # Full home (XYZ)
  G90                   # Absolute position

###########################################################
###########################################################
### Let heat do things if needed then get better z home ###
###########################################################
###########################################################

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    #M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize # I don't want this until it's enclosed
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home | might need to bring back for z accuracy
  #SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  #1M109 S150                                    # Heats the nozzle to 150c
  
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  {% if printer.quad_gantry_level.applied|lower == 'false' %}
        SET_DISPLAY_TEXT MSG="QGL"      # Displays info
        QUAD_GANTRY_LEVEL
    {% endif %}
  SET_DISPLAY_TEXT MSG="Z-Soak"      # Displays info
  STABLE_Z_HOME # Instead of G28 Z  

  # Scan adaptive mesh
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode | throws klipper screen warning. troubleshoot later. doesn't matter
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolut position
  PRIMING
  CLEAN
#--------------------------------------------------------------------
[gcode_macro PRINT_END]            # Set PRINT_END as the end-of-print macro to customise the after-print action.
gcode:
    M400                           
    G92 E0                         # Zeroing the extruder
    G1 E-10.0 F3600                # Retracting the filament
    G91                            # relative position
    G0 Z1.00 X20.0 Y20.0 F6000     # Remove nozzle
    TURN_OFF_HEATERS             # Close the hot end
    M107                           # Switch off the fan.
    G1 Z2 F3000                    # Move the nozzle up 2 mm
    G90                            # absolute positioning
    G0  X150 Y300 F3600            # Park the nozzle at the rear
    BED_MESH_CLEAR               # Unloading net beds

#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

###########################
#####      Patches    #####
###########################




###########################
#####      Macros     #####
###########################
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [cartographer model default]
#*# model_coef = 1.344551487975769,
#*# 	1.764227563378109,
#*# 	0.7341749900819888,
#*# 	0.3634257608921195,
#*# 	0.4861585843861845,
#*# 	0.4387399357978805,
#*# 	-0.35717880046699674,
#*# 	-0.3945042414221482,
#*# 	0.3416697973517788,
#*# 	0.27873532133212525
#*# model_domain = 3.216991280386654e-07,3.379302392821251e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 31.280977
#*# model_offset = 0.04000
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.067015, -0.000435, -0.042360, -0.067297, -0.066931, -0.046493, -0.005201, 0.070579
#*# 	0.103696, 0.032428, -0.007549, -0.031554, -0.029621, -0.006198, 0.037486, 0.112799
#*# 	0.120602, 0.050334, 0.004216, -0.016687, -0.010720, 0.012972, 0.056735, 0.125636
#*# 	0.138976, 0.069964, 0.024512, 0.003754, 0.013423, 0.035280, 0.077989, 0.152142
#*# 	0.152617, 0.082293, 0.029832, 0.001670, 0.007128, 0.024118, 0.059782, 0.124195
#*# 	0.127092, 0.056709, 0.017593, -0.003920, 0.007629, 0.023758, 0.061168, 0.118534
#*# 	0.092361, 0.015445, -0.029542, -0.048400, -0.035653, -0.020490, 0.015343, 0.082380
#*# 	0.067925, -0.010779, -0.054654, -0.071389, -0.053558, -0.032664, -0.000191, 0.066410
#*# x_count = 8
#*# y_count = 8
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 270.0
#*# min_y = 30.0
#*# max_y = 270.0
